#!/usr/bin/env python3

import argparse
import sys
import ovh

def create_record(args):
    client = ovh.Client(
        endpoint=args.endpoint,
        application_key=args.app_key,
        application_secret=args.app_secret,
        consumer_key=args.consumer_key
    )
    
    # Check if record already exists
    records = client.get(f'/domain/zone/{args.zone}/record', 
                         fieldType=args.type,
                         subDomain=args.name)
    
    if records:
        for record_id in records:
            record = client.get(f'/domain/zone/{args.zone}/record/{record_id}')
            if record['subDomain'] == args.name and record['fieldType'] == args.type:
                if record['target'] == args.value:
                    print(f"Record {args.name} already exists with the same value", file=sys.stderr)
                    return
                else:
                    # Update existing record
                    client.put(f'/domain/zone/{args.zone}/record/{record_id}',
                              target=args.value,
                              ttl=args.ttl)
                    print(f"Record {args.name} updated")
                    return
    
    # Create new record
    client.post(f'/domain/zone/{args.zone}/record',
               fieldType=args.type,
               subDomain=args.name,
               target=args.value,
               ttl=args.ttl)
    print(f"Record {args.name} created")

def refresh_zone(args):
    client = ovh.Client(
        endpoint=args.endpoint,
        application_key=args.app_key,
        application_secret=args.app_secret,
        consumer_key=args.consumer_key
    )
    
    client.post(f'/domain/zone/{args.zone}/refresh')
    print(f"Zone {args.zone} refreshed")

def main():
    parser = argparse.ArgumentParser(description='Manage OVH DNS records')
    subparsers = parser.add_subparsers(dest='command', help='Command to run')
    
    # Create record command
    create_parser = subparsers.add_parser('create-record', help='Create DNS record')
    create_parser.add_argument('--zone', required=True, help='DNS zone')
    create_parser.add_argument('--name', required=True, help='Record name')
    create_parser.add_argument('--type', required=True, help='Record type')
    create_parser.add_argument('--value', required=True, help='Record value')
    create_parser.add_argument('--ttl', type=int, default=3600, help='Record TTL')
    create_parser.add_argument('--endpoint', required=True, help='OVH API endpoint')
    create_parser.add_argument('--app-key', required=True, help='OVH Application Key')
    create_parser.add_argument('--app-secret', required=True, help='OVH Application Secret')
    create_parser.add_argument('--consumer-key', required=True, help='OVH Consumer Key')
    
    # Refresh zone command
    refresh_parser = subparsers.add_parser('refresh-zone', help='Refresh DNS zone')
    refresh_parser.add_argument('--zone', required=True, help='DNS zone')
    refresh_parser.add_argument('--endpoint', required=True, help='OVH API endpoint')
    refresh_parser.add_argument('--app-key', required=True, help='OVH Application Key')
    refresh_parser.add_argument('--app-secret', required=True, help='OVH Application Secret')
    refresh_parser.add_argument('--consumer-key', required=True, help='OVH Consumer Key')
    
    args = parser.parse_args()
    
    if args.command == 'create-record':
        create_record(args)
    elif args.command == 'refresh-zone':
        refresh_zone(args)
    else:
        parser.print_help()
        sys.exit(1)

if __name__ == '__main__':
    main()
